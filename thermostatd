#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
from asyncio import CancelledError

import uvloop

from signal import signal, SIGINT, SIGTERM
from argparse import ArgumentParser

from thermostat import app, database

parser = ArgumentParser(__doc__)
parser.add_argument('-p', '--port', type=int, default=7475, help='port to listen for API calls')
parser.add_argument('--host', default='127.0.0.1', help='host to bind for API calls')
parser.add_argument('-c', '--config', type=str, default='/etc/thermostat.conf', help='path to configuration file')
parser.add_argument('-d', '--debug', action='store_true', help='enable debug')
args = parser.parse_args()

app.config.from_pyfile(args.config)
app.database = database.init(app.config['DATABASE_URL'])
app.broker_url = 'mqtt://' + app.config['BROKER_HOST'] + ':' + str(app.config['BROKER_PORT']) + '/'

asyncio.set_event_loop(uvloop.new_event_loop())

server = app.create_server(host=args.host, port=args.port, debug=args.debug)
loop = asyncio.get_event_loop()
task = asyncio.ensure_future(server)
signal(SIGINT, lambda s, f: loop.stop())
signal(SIGTERM, lambda s, f: loop.stop())
try:
    app.is_running = True
    loop.run_forever()
except:
    loop.stop()
finally:
    app.is_running = False
    for task in asyncio.Task.all_tasks():
        task.cancel()
    _shutdown = asyncio.gather(*asyncio.Task.all_tasks(), loop=loop)
    try:
        loop.run_until_complete(_shutdown)
    except CancelledError:
        pass
    loop.close()
